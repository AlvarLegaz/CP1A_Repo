pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent {label 'agent3'}
            steps{
                bat '''
                hostname
                whoami
                '''
                git 'https://github.com/AlvarLegaz/CP1A_Repo.git'
                bat 'dir'
                stash includes: "**/*", name:"stash_repo"
            }
        }
        
        stage('Tests'){
            
            parallel{
                stage('Static - staging'){
                    agent{label 'kali'}
                    steps{
                        sh  '''
                            hostname
        					uname -a
        					whoami
        					pwd
        					'''
        				unstash "stash_repo"	
        				sh '''	
                            flake8 --exit-zero --format=pylint --max-line-length 80 app > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                    }
                }   
                
                stage('Unit + Coverage - stagin') {
                    agent{label 'kali'}
                    steps {
                        sh  '''
                            hostname
        					uname -a
        					whoami
        					'''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                        sh  '''
                            export PYTHONPATH=.
                            coverage run --branch --source=app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit
                            coverage xml
                            '''
                        }
                        
                        junit 'result-unit.xml'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable: false, conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95'
                        }
                    }
                }
                
                stage('Rest - staging') {
                    agent{label 'kali'}
                    steps {
                        sh '''
                            hostname
        					uname -a
        					whoami
        					'''
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            sh '''
                                export FLASK_APP=app/api.py
                                export PYTHONPATH=.
                                    
                                java -jar /home/kali/Curso_DevOps/agent2/wiremock-standalone-3.5.4.jar  --port 9090 --root-dir test/wiremock &
                                flask run &
                                
                                sleep 1
                                    
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                            junit 'result-rest.xml'
                        }
                    }
                }
            }
        }
    }
}
