pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                // Obtener codigo del repo
                git 'https://github.com/AlvarLegaz/CP1A_Repo.git'
            }
        }
        
        stage('Deploy services - staging'){
            steps{
                bat '''
                    set FLASK_APP=app\\api.py
                    start flask run
                    start java -jar C:\\Users\\ALegaz\\Desktop\\CP1A_Repo_working\\Wiremock\\wiremock-standalone-3.5.3.jar --port 9090 --root-dir test\\wiremock
                                
                    powershell Start-Sleep -m 1000
                '''
            }
        }
        
        stage('Tests'){
            parallel{
                stage('Static'){
                    steps{
                        bat '''
                            flake8 --exit-zero --format=pylint --max-line-length 80 app > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                    }
                }   
                
                stage('Unit + Coverage') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            bat '''
                                set PYTHONPATH=.
                                coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                                coverage xml
                                '''
                        }
                        
                        junit 'result*.xml'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            cobertura coberturaReportFile: 'coverage.xml', onlyStable: false, failUnstable: false, conditionalCoverageTargets: '100,80,90', lineCoverageTargets: '100,85,95'
                        }
                    }
                }
                
                stage('Rest') {
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
                            bat '''
                                set FLASK_APP=app\\api.py
                                set PYTHONPATH=%WORKSPACE%
                                pytest --junitxml=result-rest.xml test/rest
                            '''
                        }
                        junit 'result*.xml'
                    }
                }
                
                stage('Security'){
                    steps{
                        bat '''
                            bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                         recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                    }
                }
                
                stage('Performance'){
                    steps{
                        bat 'C:\\Users\\ALegaz\\Desktop\\CP1A_Repo_working\\apache-jmeter-5.6.3\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jtl'
                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                }
            }
        }
    }
}
